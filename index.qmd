---
format: 
   html:
      toc: false
---

 01. [Performance critical code should be inside a function](perf01.html)
 02. [Avoid untyped global variables](perf02.html)
 03. [Pay attention to memory allocation](perf03.html)
 04. [Avoid containers with abstract type parameters](perf04.html)
 05. [Avoid struct fields with abstract type](perf05.html)
 06. [Break functions into multiple definitions](perf06.html)
 07. [Write "type-stable" functions](perf07.html)
 08. [Avoid changing the type of a variable](perf08.html)
 09. [Access arrays in memory order, along columns](perf09.html)
 10. [Pre-allocating outputs](perf10.html)
 11. [Fuse vectorized operations](perf11.html)
 12. [Consider using views for slices](perf12.html)
 13. [Copy irregularly-accessed data into a contiguous array before operating on it](perf13.html)
 14. [Consider StaticArrays.jl for small fixed-size vector/matrix operations](perf14.html)
 15. [Avoid string interpolation for I/O](perf15.html)
 16. [Performance Annotations: @fastmath @inbounds @simd](perf16.html)


## References

- Julia Docs <https://docs.julialang.org/en/v1/manual/performance-tips/>
- Benoît Fabrèges <https://plmlab.math.cnrs.fr/fabreges/julia-2019/>
- Nassar Huda <https://github.com/nassarhuda/JuliaTutorials>
- Tom Kwong <https://github.com/PacktPublishing/Hands-on-Design-Patterns-and-Best-Practices-with-Julia/>
