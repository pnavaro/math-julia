# Rotation using FFT
$$
\frac{d f}{dt} +  (v \frac{d f}{dx} - x \frac{d f}{dv}) = 0
$$

$$ 
x \in [-\pi, \pi],\qquad y \in [-\pi, \pi] \qquad \mbox{ and } \qquad t \in [0, 200\pi] 
$$

```{julia}
using  FFTW
using  LinearAlgebra
using  Plots, ProgressMeter
using  BenchmarkTools
```

## Julia type for mesh information

```jl
struct OneDMesh
    xmin :: Float64
    xmax :: Float64
    nx   :: Int
end

OneDMesh( -π, π, 128)
```

```{julia}
struct TwoDMesh
    
    nx   :: Int
    ny   :: Int
    xmin :: Float64
    xmax :: Float64
    ymin :: Float64
    ymax :: Float64
    dx   :: Float64
    dy   :: Float64
    x    :: Vector{Float64}
    y    :: Vector{Float64}
    
    function TwoDMesh( xmin, xmax, nx, ymin, ymax, ny)
        dx, dy = (xmax-xmin)/nx, (ymax-ymin)/ny
        x = LinRange(xmin, xmax, nx+1)[1:end-1]  # we remove the end point
        y = LinRange(ymin, ymax, ny+1)[1:end-1]  # for  periodic boundary condition
        new( nx, ny, xmin, xmax, ymin, ymax, dx, dy, x, y)
    end
end
```

```{julia}
mesh = TwoDMesh(-π, π, 128, -π, π, 256)
```

```{julia}
@show mesh.xmin, mesh.xmax, mesh.nx, mesh.dx
```

```{julia}
mesh.x
```

# Initialization of f : 2d array of double float

```{julia}
f = zeros(Float64,(mesh.nx,mesh.ny))

for (i, x) in enumerate(mesh.x), (j, y) in enumerate(mesh.y)

    f[i,j] = exp(-(x-1)*(x-1)/0.1)*exp(-(y-1)*(y-1)/0.1)
        
end
```

### Julia function to compute exact solution

```{julia}
function compute_exact_solution(final_time, mesh)
   
    f = zeros(Float64,(mesh.nx, mesh.ny))
    for (i, x) in enumerate(mesh.x), (j, y) in enumerate(mesh.y)
        xn = cos(final_time)*x - sin(final_time)*y
        yn = sin(final_time)*x + cos(final_time)*y
        f[i,j] = exp(-(xn-1)*(xn-1)/0.1)*exp(-(yn-1)*(yn-1)/0.1)
    end
    f
end
```

```{julia}
f = compute_exact_solution(0.0, mesh)
surface(f)
```

## Create the gif to show what we are computing

```{julia}
function create_gif_animation(mesh, nsteps)
    
    prog = Progress(nsteps,1) ## progress bar
    
    @gif for t in range(0, stop=2π, length=nsteps)

        f(x,y) = exp(-((cos(t)*x-sin(t)*y)-1)^2/0.2)*exp(-((sin(t)*x+cos(t)*y)-1)^2/0.2)
        
        p = plot(x, y, f, st = [:surface])
    
        plot!(p[1])
        plot!(zlims=(-0.01,1.01))
    
        next!(prog) # increment the progress bar
    end
end
```

```{julia}
create_gif_animation(mesh, 100);
```

## Function to compute error

```{julia}
function compute_error(f, f_exact)
    maximum(abs.(f .- f_exact))
end
```

## Naive translation of a matlab code

```{julia}
function naive_translation_from_matlab(final_time, nsteps, mesh::Mesh)

    dt = final_time/nsteps

    kx = 2π/(mesh.xmax-mesh.xmin) .* fftfreq(mesh.nx, mesh.nx)
    ky = 2π/(mesh.ymax-mesh.ymin) .* fftfreq(mesh.ny, mesh.ny)

    f = compute_exact_solution(0.0, mesh)

    for n=1:nsteps
       
       for (i, x) in enumerate(mesh.x)
           f[i,:]=real(ifft(exp.(1im*x*ky*tan(dt/2)).*fft(f[i,:])))
       end
       
       for (j, y) in enumerate(mesh.y)
           f[:,j]=real(ifft(exp.(-1im*y*kx*sin(dt)).*fft(f[:,j])))
       end
       
       for (i, x) in enumerate(mesh.x)
           f[i,:]=real(ifft(exp.(1im*x*ky*tan(dt/2)).*fft(f[i,:])))
       end
   end

   f
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", compute_error(naive_translation_from_matlab(final_time, nt, mesh), exact(final_time, mesh)))
@btime naive_from_matlab(final_time, nt, mesh);
```

###  Vectorized version

- We remove the for loops over direction x and y by creating the 2d arrays `exky` and `ekxy`.
- We save cpu time by computing them before the loop over time

```{julia}
function vectorized(final_time, nt, mesh::Mesh)

    dt = final_time/nt

    kx = 2π/(mesh.xmax-mesh.xmin) .* fftfreq(mesh.nx, mesh.nx)
    ky = 2π/(mesh.ymax-mesh.ymin) .* fftfreq(mesh.ny, mesh.ny)

    f = exact(0.0, mesh)

    exky = exp.( 1im*tan(dt/2) .* mesh.x  .* ky')
    ekxy = exp.(-1im*sin(dt)   .* mesh.y' .* kx )
    
    for n = 1:nt
        f = real(ifft(exky .* fft(f, 2), 2))
        f = real(ifft(ekxy .* fft(f, 1), 1))
        f = real(ifft(exky .* fft(f, 2), 2))
    end

    f
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", error1(vectorized(final_time, nt, mesh), exact(final_time, mesh)))
@btime vectorized(final_time, nt, mesh);
```

## Inplace computation 
- We remove the Float64-Complex128 conversion by allocating the distribution function `f` as a Complex array
- Note that we need to use the inplace assignement operator ".="  to initialize the `f` array.
- We use inplace computation for fft with the "bang" operator `!`

```{julia}
function inplace(final_time, nt, mesh::Mesh)

    dt = final_time/nt

    kx = 2π/(mesh.xmax-mesh.xmin)*[0:mesh.nx÷2-1;mesh.nx÷2-mesh.nx:-1]
    ky = 2π/(mesh.ymax-mesh.ymin)*[0:mesh.ny÷2-1;mesh.ny÷2-mesh.ny:-1]
    
    f  = zeros(Complex{Float64},(mesh.nx,mesh.ny))
    f .= exact(0.0, mesh)

    exky = exp.( 1im*tan(dt/2) .* mesh.x  .* ky')
    ekxy = exp.(-1im*sin(dt)   .* mesh.y' .* kx )
    
    for n = 1:nt
        fft!(f, 2)
        f .= exky .* f
        ifft!(f,2)
        fft!(f, 1)
        f .= ekxy .* f
        ifft!(f, 1)
        fft!(f, 2)
        f .= exky .* f
        ifft!(f,2)        
    end

    real(f)
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", error1(inplace(final_time, nt, mesh), exact(final_time, mesh)))
@btime inplace(final_time, nt, mesh);
```

### Use plans for fft

- When you apply multiple fft on array with same shape and size, it is recommended to use fftw plan to improve computations.
- Let's try to initialize our two fft along x and y with plans.

```{julia}
function with_fft_plans(final_time, nt, mesh::Mesh)

    dt = final_time/nt

    kx = 2π/(mesh.xmax-mesh.xmin)*[0:mesh.nx÷2-1;mesh.nx÷2-mesh.nx:-1]
    ky = 2π/(mesh.ymax-mesh.ymin)*[0:mesh.ny÷2-1;mesh.ny÷2-mesh.ny:-1]
    
    f  = zeros(Complex{Float64},(mesh.nx,mesh.ny))
    f .= exact(0.0, mesh)
    f̂  = similar(f)

    exky = exp.( 1im*tan(dt/2) .* mesh.x  .* ky')
    ekxy = exp.(-1im*sin(dt)   .* mesh.y' .* kx )
        
    Px = plan_fft(f, 1)
    Py = plan_fft(f, 2)
        
    for n = 1:nt
        
        f̂ .= Py * f
        f̂ .= f̂  .* exky
        f .= Py \ f̂
        
        f̂ .= Px * f
        f̂ .= f̂  .* ekxy 
        f .= Px \ f̂
        
        f̂ .= Py * f
        f̂ .= f̂  .* exky
        f .= Py \ f̂
        
    end

    real(f)
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", error1(with_fft_plans(final_time, nt, mesh), exact(final_time, mesh)))
@btime with_fft_plans(final_time, nt, mesh);
```

## Inplace computation and fft plans

To apply fft plan to an array A, we use a preallocated output array Â by calling `mul!(Â, plan, A)`. 
The input array A must be a complex floating-point array like the output Â.
The inverse-transform is computed inplace by applying `inv(P)` with `ldiv!(A, P, Â)`.

```{julia}
function with_fft_plans_inplace(final_time, nt, mesh::Mesh)

    dt = final_time/nt

    kx = 2π/(mesh.xmax-mesh.xmin)*[0:mesh.nx÷2-1;mesh.nx÷2-mesh.nx:-1]
    ky = 2π/(mesh.ymax-mesh.ymin)*[0:mesh.ny÷2-1;mesh.ny÷2-mesh.ny:-1]
    
    f  = zeros(Complex{Float64},(mesh.nx,mesh.ny))
    f .= exact(0.0, mesh)
    f̂  = similar(f)

    exky = exp.( 1im*tan(dt/2) .* mesh.x  .* ky')
    ekxy = exp.(-1im*sin(dt)   .* mesh.y' .* kx )

    Px = plan_fft(f, 1)    
    Py = plan_fft(f, 2)
        
    for n = 1:nt
        
        mul!(f̂, Py, f)
        f̂ .= f̂ .* exky
        ldiv!(f, Py, f̂)
        
        mul!(f̂, Px, f)
        f̂ .= f̂ .* ekxy 
        ldiv!(f, Px, f̂)
        
        mul!(f̂, Py, f)
        f̂ .= f̂ .* exky
        ldiv!(f, Py, f̂)
        
    end

    real(f)
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", error1(with_fft_plans_inplace(final_time, nt, mesh), exact(final_time, mesh)))
@btime with_fft_plans_inplace(final_time, nt, mesh);
```

## Explicit transpose of `f`

- Multidimensional arrays in Julia are stored in column-major order.
- FFTs along y are slower than FFTs along x
- We can speed-up the computation by allocating the transposed `f` 
and transpose f for each advection along y.

```{julia}
function with_fft_transposed(final_time, nt, mesh::Mesh)

    dt = final_time/nt

    kx = 2π/(mesh.xmax-mesh.xmin)*[0:mesh.nx÷2-1;mesh.nx÷2-mesh.nx:-1]
    ky = 2π/(mesh.ymax-mesh.ymin)*[0:mesh.ny÷2-1;mesh.ny÷2-mesh.ny:-1]
    
    f  = zeros(Complex{Float64},(mesh.nx,mesh.ny))
    f̂  = similar(f)
    fᵗ = zeros(Complex{Float64},(mesh.ny,mesh.nx))
    f̂ᵗ = similar(fᵗ)

    exky = exp.( 1im*tan(dt/2) .* mesh.x' .* ky )
    ekxy = exp.(-1im*sin(dt)   .* mesh.y' .* kx )
    
    FFTW.set_num_threads(4)
    Px = plan_fft(f,  1, flags=FFTW.PATIENT)    
    Py = plan_fft(fᵗ, 1, flags=FFTW.PATIENT)
    
    f .= exact(0.0, mesh)
    
    for n = 1:nt
        transpose!(fᵗ,f)
        mul!(f̂ᵗ, Py, fᵗ)
        f̂ᵗ .= f̂ᵗ .* exky
        ldiv!(fᵗ, Py, f̂ᵗ)
        transpose!(f,fᵗ)
        
        mul!(f̂, Px, f)
        f̂ .= f̂ .* ekxy 
        ldiv!(f, Px, f̂)
        
        transpose!(fᵗ,f)
        mul!(f̂ᵗ, Py, fᵗ)
        f̂ᵗ .= f̂ᵗ .* exky
        ldiv!(fᵗ, Py, f̂ᵗ)
        transpose!(f,fᵗ)
    end
    real(f)
end
```

```{julia}
nt, final_time = 1000, 200
println( " error = ", error1(with_fft_transposed(final_time, nt, mesh), exact(final_time, mesh)))
@btime with_fft_transposed(final_time, nt, mesh);
```

```{julia}
final_time, nt = 400π, 1000
mesh = Mesh(-π, π, 512, -π, π, 256)
```

```{julia}
inplace_bench = @benchmark inplace(final_time, nt, mesh)
vectorized_bench = @benchmark vectorized(final_time, nt, mesh)
with_fft_plans_bench = @benchmark with_fft_plans(final_time, nt, mesh)
with_fft_plans_inplace_bench = @benchmark with_fft_plans_inplace(final_time, nt, mesh)
with_fft_transposed_bench = @benchmark with_fft_transposed(final_time, nt, mesh)
```

```{julia}
d = Dict() 
d["vectorized"] = minimum(vectorized_bench.times) / 1e6
d["inplace"] = minimum(inplace_bench.times) / 1e6
d["with_fft_plans"] = minimum(with_fft_plans_bench.times) / 1e6
d["with_fft_plans_inplace"] = minimum(with_fft_plans_inplace_bench.times) / 1e6
d["with_fft_transposed"] = minimum(with_fft_transposed_bench.times) / 1e6;
```

```{julia}
for (key, value) in sort(collect(d), by=last)
    println(rpad(key, 25, "."), lpad(round(value, digits=1), 6, "."))
end
```

## Conclusion
- Use pre-allocations of memory and inplace computation are very important
- Try to always do computation on data contiguous in memory
- In this notebook, use `@btime` to not taking account of time consumed in 
compilation.
