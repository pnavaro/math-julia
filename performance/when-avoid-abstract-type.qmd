---
title: "Abstract type"
---

## Avoid containers with abstract type parameters

```{julia}
a = Real[]

push!(a, 1); push!(a, 2.0); push!(a, π)

```

Since `Real` objects can be of arbitrary size and structure, `a` must be represented as an array of pointers to individually allocated `Real` objects. With concrete type `Float64`, `b` is stored as a contiguous block of 64-bit floating-point values that can be manipulated efficiently.


```{julia}
b = Float64[]

push!(b, 1); push!(b, 2.0); push!(b,  π)
```

## Avoid struct fields with abstract type

Types matter, when you know anything about the types of your
variables, include them in your code to make it run faster

```{julia}
struct Cube
    length
    width
    height
end

struct CubeTyped
    length::Float64
    width::Float64
    height::Float64
end

struct CubeParametricTyped{T <: Real}
    length::T
    width::T
    height::T
end
```

---

```{julia}

volume(c) = c.length*c.width*c.height

c1 = Cube(1.1,1.2,1.3)
c2 = CubeTyped(1.1,1.2,1.3)
c3 = CubeParametricTyped(1.1,1.2,1.3)
@show volume(c1) == volume(c2) == volume(c3)
```

```{julia}
using BenchmarkTools
@btime volume($c1) # not typed
@btime volume($c2) # typed float
@btime volume($c3) # typed parametric
```

---

```{julia}
@code_warntype volume(c1)
```

---

```{julia}
@code_warntype volume(c2)
```

---

```{julia}
@code_warntype volume(c3)
```

---


