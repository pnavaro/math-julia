---
title: Type stability
subtitle: "A function is type stable when you can derive what the output of the function needs to be."
---


```{julia}
function square_plus_one(v::T) where T <:Number
    g = v * v
    return g + 1
end
```

```{julia}
v = rand()
```

```{julia}
@code_warntype square_plus_one(v)
```

---

```{julia}
w = 5
```

```{julia}
@code_warntype square_plus_one(w)
```

---

Great! In the above two examples, we were able to predict what the output will be. This is because:
```
function square_plus_one(v::T) where T <:Number
    g = v*v         # Type(T * T) ==> T
    return g+1      # Type(T + Int)) ==> "max" (T,Int)
end

```
Note that in both calls the return type was different, once `Float64` and once `Int64`. But the function is still type stable.

---

```{julia}
function zero_or_val(x::Real)
    if x >= 0
        return x
    else
        return 0
    end
end
@code_warntype zero_or_val(0.2)
```

---

You can avoid type instable code by using the `promote_type` function which returns the highest of the two types passed.

```{julia}
function zero_or_val_stable(x::Real)
    if x >= 0
        y = x
    else
        y = 0
    end
    T = promote_type(typeof(x),Int)
    return T(y)
end
@code_warntype zero_or_val_stable(0.2)
```


## Break functions into multiple definitions

```{.julia}
using LinearAlgebra

function mynorm(A)
    if isa(A, Vector)
        return sqrt(real(dot(A,A)))
    elseif isa(A, Matrix)
        return maximum(svdvals(A))
    else
        error("mynorm: invalid argument")
    end
end
```

This can be written more concisely and efficiently as:

```{.julia}
norm(x::Vector) = sqrt(real(dot(x, x)))

norm(A::Matrix) = maximum(svdvals(A))
```

## Avoid changing the type of a variable

Let us say we want to play the following game, I give you a vector of numbers. And you want to accumulate the sum as follows. For each number in the vector, you toss a coin (`rand()`), if it is heads (`>=0.5`), you add `1`. Otherwise, you add the number itself.

```{julia}
function flipcoin_then_add(v::Vector{T}) where T <: Real
    s = 0
    for vi in v
        r = rand()
        if r >=0.5
            s += 1
        else
            s += vi
        end
    end
end
```


---


```{julia}

function flipcoin_then_add_typed(v::Vector{T}) where T <: Real
    s = zero(T)
    for vi in v
        r = rand()
        if r >=0.5
            s += one(T)
        else
            s += vi
        end
    end
end
```

---

```{julia}
using BenchmarkTools

myvec = rand(1000)
@show flipcoin_then_add(myvec) == flipcoin_then_add_typed(myvec)
```

```{julia}
@btime flipcoin_then_add(rand(1000))
@btime flipcoin_then_add_typed(rand(1000))
```


